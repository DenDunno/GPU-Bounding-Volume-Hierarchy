#pragma kernel ChunkPrefixSum
#pragma enable_d3d11_debug_symbols
#include "..//Common.hlsl"

RWStructuredBuffer<int> Result;
RWStructuredBuffer<int> BlockSum;

groupshared int ExclusiveScan[THREADS];

struct LeafIndices
{
    uint Left;
    uint Right;

    static LeafIndices Create(uint threadId, uint step)
    {
        LeafIndices indices;
        indices.Right = THREAD_LAST_INDEX - threadId * (step * 2);
        indices.Left = indices.Right - step;
        return indices;
    }
};

void UpSweep(uint threadId)
{
    for (uint step = 1; step < THREADS; step *= 2)
    {
        GroupMemoryBarrierWithGroupSync();
        uint threadsTotal = ceil(THREADS / (step * 2.0f));

        if (threadId < threadsTotal)
        {
            LeafIndices indices = LeafIndices::Create(threadId, step);
            ExclusiveScan[indices.Right] += ExclusiveScan[indices.Left];
        }
    }
}

void SetLastElementToZero(const uint threadId)
{
    if (threadId == THREAD_LAST_INDEX)
    {
        ExclusiveScan[THREAD_LAST_INDEX] = 0;
    }
}

void DownSweep(uint threadId)
{
    SetLastElementToZero(threadId);
    
    for (uint threadsTotal = 1, step = THREADS / 2; threadsTotal < THREADS; threadsTotal *= 2, step /= 2)
    {
        GroupMemoryBarrierWithGroupSync();
        if (threadId < threadsTotal)
        {
            LeafIndices indices = LeafIndices::Create(threadId, step);
            const int rightLeaf = ExclusiveScan[indices.Right];
            const int leftLeaf = ExclusiveScan[indices.Left];
            
            ExclusiveScan[indices.Left] = rightLeaf;
            ExclusiveScan[indices.Right] = rightLeaf + leftLeaf;
        }
    }

    GroupMemoryBarrierWithGroupSync();
}

int MoveDataFromGlobalToSharedMemory(uint globalId, uint threadId)
{
    return ExclusiveScan[threadId] = Result[globalId];
}

void MoveDataFromSharedToGlobalMemory(uint globalId, uint threadId)
{
    Result[globalId] = ExclusiveScan[threadId];
}

void TryWriteBlockSum(uint threadId, uint groupId, int value)
{
    if (threadId == THREAD_LAST_INDEX)
    {
        BlockSum[groupId] = ExclusiveScan[THREAD_LAST_INDEX] + value;
    }
}

[numthreads(THREADS,1,1)]
void ChunkPrefixSum(uint3 id : SV_DispatchThreadID, uint3 groupId : SV_GroupID, uint3 threadId : SV_GroupThreadID)
{
    const int value = MoveDataFromGlobalToSharedMemory(id.x, threadId.x);
    UpSweep(threadId.x);
    DownSweep(threadId.x);
    MoveDataFromSharedToGlobalMemory(id.x, threadId.x);
}