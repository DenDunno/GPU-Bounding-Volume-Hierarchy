#pragma kernel GlobalScatter
#pragma kernel ChunkSort
#define SORTED_BITS_PER_PASS 2
#define ALL_POSSIBLE_VALUES 4 // SORTED_BITS_PER_PASS ^ 2
#define OUT_OF_BOUND_VALUE -1
#define PREFIX_SUM_ROWS ALL_POSSIBLE_VALUES
#include "RadixSortBlockSum.hlsl"
#include "../BitManipulation.hlsl"
#include "../ThreadId.hlsl"
#include "../Threads.hlsl"
#include "../PrefixSum/Shaders/BlellochPrefixSum.hlsl"

RWStructuredBuffer<int> LocalPrefixSum;
RWStructuredBuffer<int> LocalShuffle;
RWStructuredBuffer<int> Input;
groupshared int OffsetTable[ALL_POSSIBLE_VALUES + 1];
groupshared int LocalPrefixSumChunk[THREADS];
groupshared int SortedChunk[THREADS];
uniform uint SortLength;
uniform int BitOffset;

int GetInputValue(uint globalId)
{
    return globalId >= SortLength ?
        OUT_OF_BOUND_VALUE :
        ExtractBits(Input[globalId], BitOffset, SORTED_BITS_PER_PASS);
}

void AddToOffsetTable(int sortValue, const int totalElementsInGroup)
{
    OffsetTable[sortValue + 1] = totalElementsInGroup + OffsetTable[sortValue];
}

void TryWriteToLocalPrefixSumChunk(const uint threadId, const int hasPassedMask, const int elementPrefixSum)
{
    if (hasPassedMask)
    {
        LocalPrefixSumChunk[threadId] = elementPrefixSum;
    }
}

void InitializeOffsetTable(uint threadId)
{
    if (threadId == THREAD_LAST_INDEX)
    {
        OffsetTable[0] = 0;
    }
}

void HandleLastLocalThread(const ThreadId id, int sortValue, const int hasPassedMask, const int elementExclusivePrefixSum)
{
    if (id.Local == THREAD_LAST_INDEX)
    {
        const int totalElementsInGroup = elementExclusivePrefixSum + hasPassedMask;
        WriteToBlockSum(sortValue, id.Group, totalElementsInGroup);
        AddToOffsetTable(sortValue, totalElementsInGroup);
    }
}

void BuildPrefixSumAndOffsetTable(const int inputValue, const ThreadId id)
{
    [unroll(ALL_POSSIBLE_VALUES)]
    for (int sortValue = 0; sortValue < ALL_POSSIBLE_VALUES; ++sortValue)
    {
        const int hasPassedMask = inputValue == sortValue;
        const int elementExclusivePrefixSum = ComputeExclusivePrefixSum(hasPassedMask, id.Local, sortValue);
        TryWriteToLocalPrefixSumChunk(id.Local, hasPassedMask, elementExclusivePrefixSum);
        HandleLastLocalThread(id, sortValue, hasPassedMask, elementExclusivePrefixSum);
    }

    GroupMemoryBarrierWithGroupSync();
}

void PerformLocalScatter(const int inputValue, const ThreadId id)
{
    int targetElementPrefixSum = LocalPrefixSumChunk[id.Local];
    int totalElementsLessThanTargetElement = OffsetTable[inputValue];
    int localScatterIndex = targetElementPrefixSum + totalElementsLessThanTargetElement;
    GroupMemoryBarrierWithGroupSync();

    LocalPrefixSumChunk[localScatterIndex] = targetElementPrefixSum;
    SortedChunk[localScatterIndex] = inputValue;
    GroupMemoryBarrierWithGroupSync();

    LocalShuffle[id.Global] = SortedChunk[id.Local];
    LocalPrefixSum[id.Global] = LocalPrefixSumChunk[id.Local];
}

[numthreads(THREADS,1,1)]
void ChunkSort(int globalId : SV_DispatchThreadID, uint threadId : SV_GroupThreadID, int groupId : SV_GroupID)
{
    ThreadId id = ThreadId::Create(globalId, threadId, groupId);
    const int inputValue = GetInputValue(id.Global);
    InitializeOffsetTable(id.Local);
    BuildPrefixSumAndOffsetTable(inputValue, id);
    PerformLocalScatter(inputValue, id);
}

[numthreads(THREADS,1,1)]
void GlobalScatter(int globalId : SV_DispatchThreadID, uint threadId : SV_GroupThreadID, int groupId : SV_GroupID)
{
    if (globalId >= SortLength) return;
    int inputValue = LocalShuffle[globalId];
    int sortValue = ExtractBits(inputValue, BitOffset, SORTED_BITS_PER_PASS);
    
    int blockSumPrefixSum = ReadBlockSumPrefixSum(sortValue, groupId);
    int localPrefixSum = LocalPrefixSum[globalId];
    int globalScatterPosition = localPrefixSum + blockSumPrefixSum;
    
    Input[globalScatterPosition] = inputValue;
}