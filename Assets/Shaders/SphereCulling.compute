#pragma kernel CSMain
#pragma enable_d3d11_debug_symbols
#include "Frustum.hlsl"
#include "SphereData.hlsl"

RWStructuredBuffer<int> _SpheresInTile;
RWStructuredBuffer<int> _SpheresInTileCount;
StructuredBuffer<SphereData> _Spheres;
StructuredBuffer<Frustum> _SubFrustums;
float4x4 _CameraWorldToLocal;
int _MaxSpheresInTile;
int _SpheresCount;

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    Frustum subFrustum = _SubFrustums[id.x];
    const SphereData sphere = _Spheres[id.y];
    const float3 sphereCameraSpacePosition = mul(_CameraWorldToLocal, float4(sphere.position, 1)).xyz;
    const int isVisible = 1 - subFrustum.IsOutside(sphereCameraSpacePosition, sphere.radius);

    if (isVisible)
    {
        uint offset = 0;
        InterlockedAdd(_SpheresInTileCount[id.x], 1, offset);
        offset = min(offset, _MaxSpheresInTile - 1);
        
        const int sphereIndex = id.x * _MaxSpheresInTile + offset;
        _SpheresInTile[sphereIndex] = id.y;
    }
}