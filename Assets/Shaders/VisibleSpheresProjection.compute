#pragma kernel CSMain
#pragma enable_d3d11_debug_symbols
#include "Frustum.hlsl"
#include "SphereData.hlsl"
#include "AABB2D.hlsl"

RWStructuredBuffer<int> _VisibleSpheres;
RWStructuredBuffer<AABB> _BoundingBoxes;
StructuredBuffer<SphereData> _Spheres;
StructuredBuffer<Frustum> _Frustum;
float4x4 _CameraWorldToLocal;
float4x4 _ProjectionMatrix;
float3 _CameraPosition;
uint _SpheresCount;

AABB GetScreenAABBFromWorldSphere(float3 position, float radius, float3 viewDirection)
{
    AABB boundingBox;
    boundingBox.max = float2(0, 0);
    boundingBox.min = float2(0, 0);

    return boundingBox;
}

[numthreads(8,1,1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= _SpheresCount) return;

    const SphereData sphere = _Spheres[id.x];
    Frustum cameraFrustum = _Frustum[0];

    const float4 sphereCameraSpacePosition = mul(_CameraWorldToLocal, float4(sphere.position, 1));
    const int isVisible = 1 - cameraFrustum.IsOutside(sphereCameraSpacePosition.xyz, sphere.radius);

    if (isVisible)
    {
        const int index = _VisibleSpheres.IncrementCounter();
        _VisibleSpheres[index] = id.x;

        const float3 viewDirection = sphere.position - _CameraPosition;
        _BoundingBoxes[index] = GetScreenAABBFromWorldSphere(sphere.position, sphere.radius, viewDirection);
    }
}
