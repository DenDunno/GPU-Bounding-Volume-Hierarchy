#pragma kernel GlobalScatter
#pragma kernel ChunkSort
#define ALL_POSSIBLE_VALUES 4 // SORTED_BITS_PER_PASS ^ 2
#define PREFIX_SUM_TYPE int
#define THREADS 256
#include "../PrefixSum/HillisAndSteelePrefixSum.hlsl"
#include "RadixSortBlockSum.hlsl"
#include "IntegerRadixSort.hlsl"
#include "RadixSortInput.hlsl"

RWStructuredBuffer<SORTING_TYPE> LocalShuffle;
RWStructuredBuffer<int> LocalPrefixSum;
groupshared SORTING_TYPE SortedChunk[THREADS];
groupshared int LocalPrefixSumChunk[THREADS];
groupshared int4 OffsetTable; // int4 for optimization, int[ALL_POSSIBLE_VALUES = 4]

void BuildOffsetTableForLocalScattering(const int4 totalElementsInGroup)
{
    int4 offsetTable = 0;

    [unroll(ALL_POSSIBLE_VALUES - 1)]
    for (int sortValue = 1; sortValue < ALL_POSSIBLE_VALUES; ++sortValue)
    {
        offsetTable[sortValue] = totalElementsInGroup[sortValue - 1] +
                                 offsetTable[sortValue - 1];
    }

    OffsetTable = offsetTable;
}

void WriteToBlockSum(const int groupId, const int4 totalElementsInGroup)
{
    [unroll(ALL_POSSIBLE_VALUES)]
    for (int sortValue = 0; sortValue < ALL_POSSIBLE_VALUES; ++sortValue)
    {
        WriteToBlockSum(sortValue, groupId, totalElementsInGroup[sortValue]);
    }
}

void PerformLocalScatter(const RadixSortInput input, const int threadId, const int globalId)
{
    GroupMemoryBarrierWithGroupSync();
    const int targetElementPrefixSum = LocalPrefixSumChunk[threadId];
    const int totalElementsLessThanTargetElement = OffsetTable[input.ExtractedBits];
    const int localScatterIndex = totalElementsLessThanTargetElement + targetElementPrefixSum;
    GroupMemoryBarrierWithGroupSync();

    if (IsInBounds(globalId))
    {
        LocalPrefixSumChunk[localScatterIndex] = targetElementPrefixSum;
        SortedChunk[localScatterIndex] = input.InitialValue;
    }

    GroupMemoryBarrierWithGroupSync();

    if (IsInBounds(globalId))
    {
        LocalPrefixSum[globalId] = LocalPrefixSumChunk[threadId];
        LocalShuffle[globalId] = SortedChunk[threadId];
    }
}

void HandleLastLocalThread(const int threadId, const int groupId, const int4 hasPassedMask, const int4 scanPerElement)
{
    if (threadId == THREAD_LAST_INDEX)
    {
        const int4 totalElementsInGroup = scanPerElement + hasPassedMask;
        BuildOffsetTableForLocalScattering(totalElementsInGroup);
        WriteToBlockSum(groupId, totalElementsInGroup);
    }
}

void BuildLocalPrefixSumChunk(const int threadId, const int4 hasPassedMask, const int4 scanPerElement)
{
    [unroll(ALL_POSSIBLE_VALUES)]
    for (int sortValue = 0; sortValue < ALL_POSSIBLE_VALUES; ++sortValue)
    {
        int sortValueExclusiveScan = scanPerElement[sortValue];

        if (hasPassedMask[sortValue])
        {
            LocalPrefixSumChunk[threadId] = sortValueExclusiveScan;
        }
    }
}

int4 PerformScanPerElement(const int threadId, const int4 hasPassedMask)
{
    const int encodedMask = BitUtils::EncodeInt4(hasPassedMask);
    const int encodedScanPerElement = ComputeExclusiveScan(encodedMask, threadId);
    return BitUtils::DecodeInt4(encodedScanPerElement);
}

[numthreads(THREADS,1,1)]
void ChunkSort(const int globalId : SV_DispatchThreadID, const int threadId : SV_GroupThreadID, const int groupId : SV_GroupID)
{
    const RadixSortInput input = RadixSortInput::Fetch(globalId);
    const int4 scanPerElement = PerformScanPerElement(threadId, input.HasPassedMask);
    BuildLocalPrefixSumChunk(threadId, input.HasPassedMask, scanPerElement);
    HandleLastLocalThread(threadId, groupId, input.HasPassedMask, scanPerElement);
    PerformLocalScatter(input, threadId, globalId);
}

[numthreads(THREADS,1,1)]
void GlobalScatter(const int globalId : SV_DispatchThreadID, const int groupId : SV_GroupID)
{
    if (IsOutOfBounds(globalId)) return;

    const SORTING_TYPE bufferValue = LocalShuffle[globalId];
    const int sortValue = ExtractBits(bufferValue);

    const int blockSumPrefixSum = ReadBlockSumPrefixSum(sortValue, groupId);
    const int localPrefixSum = LocalPrefixSum[globalId];
    const int globalScatterPosition = localPrefixSum + blockSumPrefixSum;

    Input[globalScatterPosition] = bufferValue;
}