#pragma kernel Build
#pragma enable_d3d11_debug_symbols
#include "BinaryRadixTree.hlsl"
#include "ConstructionResult.hlsl"

void Merge(const int parentId)
{
    BVHNode node = Nodes[parentId];
    BVHNode leftChild = Nodes[node.LeftChild()];
    BVHNode rightChild = Nodes[node.RightChild()];
    node.Box = leftChild.Box.Union(rightChild.Box);

    Nodes[parentId] = node;
}

int ComputeNodeIndex(uint threadId, inout bool isLeaf)
{
    uint nodeIndex = isLeaf ? ComputeLeafIndex(threadId) : threadId;
    isLeaf = false;
    return nodeIndex;
}

ConstructionResult Run(uint id)
{
    bool isThreadActive = id < LeavesCount;
    Range range = Range::Create(id);
    bool isLeaf = true;

    while (isThreadActive && IsNotRoot(range.Size()))
    {
        id = ComputeNodeIndex(id, isLeaf);
        ParentInfo parentInfo = ChooseParent(id, range);
        isThreadActive = parentInfo.HaveBothChildrenBeenProcessed();

        if (isThreadActive)
        {
            range = parentInfo.Range;
            id = parentInfo.Id;
            Merge(parentInfo.Id);
        }
    }
    
    return ConstructionResult::Create(id, range.Size());
}

[numthreads(1,1,1)]
void Build(uint id : SV_DispatchThreadID)
{
    ConstructionResult result = Run(id);
    TrySetRoot(result.NodeIndex, result.RangeSize);
}
