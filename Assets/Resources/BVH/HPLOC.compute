#pragma kernel Build
#include "BinaryRadixTree.hlsl"

void Merge(const int parentId)
{
    BVHNode node = Nodes[parentId];
    BVHNode leftChild = Nodes[node.LeftChild()];
    BVHNode rightChild = Nodes[node.RightChild()];
    node.Box = leftChild.Box.Union(rightChild.Box);
    Nodes[parentId] = node;
}

int ComputeNodeIndex(uint threadId, inout bool isLeaf)
{
    uint nodeIndex = isLeaf ? threadId + LeavesCount : threadId;
    isLeaf = false;
    return nodeIndex;
}

[numthreads(1,1,1)]
void Build(uint id : SV_DispatchThreadID)
{
    bool isThreadActive = id < LeavesCount;
    Range range = Range::Create(id);
    bool isLeaf = true;
    
    while (isThreadActive)
    {
        id = ComputeNodeIndex(id, isLeaf);
        ParentInfo parentInfo = ChooseParent(id, range);
        isThreadActive = parentInfo.HaveBothChildrenBeenProcessed();
        
        if (isThreadActive)
        {
            range = parentInfo.Range;
            id = parentInfo.Id;
            Merge(parentInfo.Id);
        }
    }
}