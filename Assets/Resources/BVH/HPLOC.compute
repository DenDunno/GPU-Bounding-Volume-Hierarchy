#pragma kernel Build
#include "BinaryRadixTree.hlsl"

void Merge(const int parentId)
{
    BVHNode node = Nodes[parentId];
    BVHNode leftChild = Nodes[node.LeftChild()];
    BVHNode rightChild = Nodes[node.RightChild()];

    node.Box = leftChild.Box.Union(rightChild.Box);
    Nodes[parentId] = node;
    
    Range leftChildRange = Ranges[node.LeftChild()];
    Range rightChildRange = Ranges[node.RightChild()];
    Ranges[parentId] = leftChildRange.Union(rightChildRange);
}

[numthreads(256,1,1)]
void Build(const uint id : SV_DispatchThreadID)
{
    bool isThreadActive = id < _LeavesCount;
    
    while (isThreadActive)
    {
        ParentInfo parentInfo = ChooseParent(id);
        isThreadActive = parentInfo.HaveBothChildrenBeenProcessed();
        
        if (isThreadActive)
        {
            Merge(parentInfo.Id);
        }
    }
}